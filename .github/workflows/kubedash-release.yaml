name: Release kubedash

on:
  push:
    tags:
      - "*.*"

jobs:
  build-kubedash:
    name: Build kubedash
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare kubedash
        id: prep_kubedash
        run: |
          cp -r src/kubedash docker/kubedash/kubedash
          rm -f docker/kubedash/requirements.txt
          cp docker/kubedash/kubedash/requirements.txt docker/kubedash/requirements.txt
          rm -f docker/kubedash/gunicorn_conf.py
          cp docker/kubedash/kubedash/gunicorn_conf.py docker/kubedash/gunicorn_conf.py

      - name: Build amd64 kubedash
        uses: docker/build-push-action@v3.3.0
        with:
          context: docker/kubedash/
          build-args: |
            "BUILDPLATFORM=linux/amd64"
            "VERSION=${{github.ref_name}}"
            "BUILD_DATE=${{ steps.date.outputs.date }}"
          tags: devopstales/kubedash:${{github.ref_name}}-amd64,
            ghcr.io/devopstales/kubedash:${{github.ref_name}}-amd64
          push: true
          provenance: false

      - name: Build arm64v8 kubedash
        uses: docker/build-push-action@v3.3.0
        with:
          context: docker/kubedash/
          build-args: |
            "BUILDPLATFORM=linux/arm64/v8"
            "VERSION=${{github.ref_name}}"
            "BUILD_DATE=${{ steps.date.outputs.date }}"
          tags: devopstales/kubedash:${{github.ref_name}}-arm64v8,
            ghcr.io/devopstales/kubedash:${{github.ref_name}}-arm64v8
          push: true
          provenance: false

      - name: Create and push kubedash manifest images to dockerhub
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: devopstales/kubedash:${{github.ref_name}}
          images: devopstales/kubedash:${{github.ref_name}}-amd64,devopstales/kubedash:${{github.ref_name}}-arm64v8
          push: true

      - name: Write signing key to disk
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

      - name: Sign the DockerHub image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            devopstales/kubedash:${{github.ref_name}}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Sign the DockerHub amd64 image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            devopstales/kubedash:${{github.ref_name}}-amd64
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Sign the DockerHub arm64v8 image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            devopstales/kubedash:${{github.ref_name}}-arm64v8
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Create and push kubedash manifest images to github
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: ghcr.io/devopstales/kubedash:${{github.ref_name}}
          images: ghcr.io/devopstales/kubedash:${{github.ref_name}}-amd64,ghcr.io/devopstales/kubedash:${{github.ref_name}}-arm64v8
          push: true

      - name: Sign the GitHub image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            ghcr.io/devopstales/kubedash:${{github.ref_name}}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Sign the GitHub amd64 image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            ghcr.io/devopstales/kubedash:${{github.ref_name}}-amd64
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Sign the GitHub arm64v8 image
        run: |
          cosign sign --key cosign.key --yes \
            -a "workflow=${{ github.workflow }}" \
            -a "repo=${{ github.repository }}" \
            -a "ref=${{ github.sha }}" \
            ghcr.io/devopstales/kubedash:${{github.ref_name}}-arm64v8
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/devopstales/kubedash:${{github.ref_name}}
          scan-type: image
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan image in a private registry - GitHub Packages
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/devopstales/kubedash:${{github.ref_name}}
          scan-type: image
          format: 'github'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: '${{ github.workspace }}/dependency-results.sbom.json'
          retention-days: 365

      - name: Scan image in a private registry - DockerHub SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: devopstales/kubedash:${{github.ref_name}}
          scan-type: image
          format: 'cosign-vuln'
          output: 'image.sbom'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload trivy SBOM to DockerHub
        run: |
          cosign attach sbom --sbom image.sbom \
            devopstales/kubedash:${{github.ref_name}}

          cosign sign --key cosign.key --yes \
            --attachment sbom \
            devopstales/kubedash:${{github.ref_name}}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
