{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is KubeDash?","text":"<p>KubeDash is a general purpose, web-based UI for Kubernetes clusters. It allows users to observe applications running in the cluster and troubleshoot them, as well as manage the cluster itself.</p> <p>KubeDash was created to be a Kubernetes web UI that has the traditional functionality of other web UIs/dashboards available (i.e. to list and view resources) as well as other features.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Manage any Kubernetes cluster.</li> <li>CPU and Memory metrics visualization.</li> <li>User management.</li> <li>Role management for users based on templates</li> <li>Role management for SSO groups based on templates</li> <li>Pod Debugging</li> <li>Login to pod with UI based terminal</li> <li>View container logs in pods</li> <li>trivy-operator integration to visualize vulnerability</li> <li>Single sign-on integration with authentication and authorization</li> <li>Kubectl configuration generation</li> <li>Generate OIDC based Kubernetes API authentication</li> <li>Generate Certificate based authentication</li> <li>kubectl plugin for easier config download</li> <li>Dashboard Plugins</li> <li>Docker Registry UI</li> <li>Hem Chart listing</li> <li>Coming soon:</li> <li>Gateway API Plugin for object visualization</li> <li>Cert-manager Plugin object visualization</li> <li>FluxCD Plugin object visualization</li> </ul>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>This section has information on how to contribute to KubeDash. It assumes you have cloned this repository (or your own Github fork).</p> <p>Any contributions to the project are accepted under the terms of the project's license (Apache 2.0).</p>"},{"location":"contributing/#filing-an-issue-or-feature-request","title":"Filing an issue or feature request","text":"<p>Please use the project's issue tracker for filing any bugs you find or features you think are useful.</p>"},{"location":"contributing/#complex-contributions","title":"Complex contributions","text":"<p>If you have a complex contribution in mind (meaning changes in the architecture or a lot of LOC changed), it is advisable to first file a Github issue and discuss the implementation with the project's maintainers.</p>"},{"location":"contributing/#commit-guidelines","title":"Commit guidelines","text":"<p>For the general guidelines on making PRs/commits easier to review, please check out the conventionalcommits standard.</p>"},{"location":"development/dbmigrate/","title":"Dbmigrate","text":"<pre><code>export FLASK_APP=kubedash\nflask db init\n\nflask db migrate -m \"users table\"\nflask db upgrade\n\nflask db migrate -m \"posts table\"\nflask db upgrade\n\nflask db history\n\nflask db downgrade\n</code></pre>"},{"location":"development/registry-ui/","title":"Registry ui","text":"<pre><code>skopeo login --tls-verify=false 127.0.0.1:5000\nskopeo copy --dest-tls-verify=false docker://arm32v6/python:3.12-rc-alpine docker://127.0.0.1:5000/arm32v6/python:3.12-rc-alpine\nskopeo copy --dest-tls-verify=false --override-os=linux docker://python:3.12-rc-alpine docker://127.0.0.1:5000/python:3.12-rc-alpine\n\nskopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:1.0 docker://127.0.0.1:5000/registry-imega-test:1.0\nskopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:2.0 docker://127.0.0.1:5000/registry-imega-test:2.0\nskopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:3.0 docker://127.0.0.1:5000/registry-imega-test:3.0\nskopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:3.0 docker://127.0.0.1:5000/registry-imega-test:test\n\noras login --plain-http 127.0.0.1:5000\noras copy --to-plain-http ghcr.io/aquasecurity/trivy-db:2 127.0.0.1:5000/trivy-db:2\noras copy --to-plain-http ghcr.io/aquasecurity/trivy-java-db:1 127.0.0.1:5000/trivy-java-db:1\n\nhelm pull oci://registry-1.docker.io/bitnamicharts/redis --version 17.9.5\nhelm push redis-17.9.5.tgz OCI://127.0.0.1:5000/helm-charts\n\n# https://github.com/helm/helm/issues/6141\n\nCOSIGN_EXPERIMENTAL=1 cosign sign 127.0.0.1:5000/registry-imega-test:1.0\nCOSIGN_EXPERIMENTAL=1 cosign verify 127.0.0.1:5000/registry-imega-test:1.0\n\ntrivy i --format cosign-vuln 127.0.0.1:5000/registry-imega-test:1.0 &gt; image.sbom\ncosign attach sbom --sbom image.sbom 127.0.0.1:5000/registry-imega-test:1.0\n\nCOSIGN_EXPERIMENTAL=1 cosign sign --attachment sbom 127.0.0.1:5000/registry-imega-test:1.0\n</code></pre>"},{"location":"faq/technical/","title":"Technical","text":""},{"location":"faq/technical/#how-can-i-reset-the-administrator-password","title":"How can I reset the administrator password?","text":"<p>Kubernetes install (Helm):</p> <pre><code>$ kubectl -n kubedash exec $(kubectl -n kubedash get pods -l app=kubedash | grep '1/1' | head -1 | awk '{ print $1 }') -- flask commands reset-password\nNew password for default administrator (admin):\n&lt;new_password&gt;\n</code></pre>"},{"location":"functions/authentication/","title":"Authentication","text":""},{"location":"functions/authentication/#first-log-in","title":"First Log In","text":"<p>To log in for the first time the default user and password is <code>admin</code> <code>admin</code>. After you log into the web-ui you will alert to change the default admin password.</p> <p></p>"},{"location":"functions/authentication/#authentication","title":"Authentication","text":"<p>One of the key features that KubeDash adds to Kubernetes is centralized user management. This feature allows to set up local users and/or connect to an external OIDC authentication provider. By connecting to an external authentication provider, you can leverage that provider's user and groups.</p> <p></p>"},{"location":"functions/authentication/#configure-oidc-provider","title":"Configure OIDC provider","text":"<p>To add an OIDC provider to KubeDash go to <code>Settings &gt; Auth Provider</code>:</p> Parameter Description Redirect URI <code>https://yourKubDashHostURL</code> Identity Provider URL The URL of your IdP. Identity Provider Client ID The <code>Client ID</code> of your IdP client. Identity Provider Client Secret The generated <code>Secret</code> of your IdP client. <p></p>"},{"location":"functions/authentication/#authorization","title":"Authorization","text":"<p>Once an user logged in to KubeDash the their access rights within the system, is determined by the user's role. There i two role in KubeDash User and Admin. This role determinate what you can configure in KubeDash. </p>"},{"location":"functions/authentication/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>From kubernetes perspective all of your privileges are determined by Role-Based Access Control (RBAC). The KubeDash Admin role allow you to use the KubeDash pod's cluster-admin ServiceAccount for the interactions with the kubernetes API. </p> <p>With the Local role KubeDash use your OIDC token for the same purpose, so you have the same privileges as in the cli.</p>"},{"location":"functions/k8s-api/","title":"Setting up Kubernetes Clusters in KubeDash","text":""},{"location":"functions/k8s-api/#configure-kubernetes-cluster-connection","title":"Configure Kubernetes cluster connection","text":"<p>To add a Kubernetes Cluster to KubeDash go to <code>Settings &gt; Cluster Configuration</code> and Click <code>New</code>:</p> Parameter Description Kubernetes Config Context The name of the cluster context Kubernetes API URL <code>https://yourKubernetesHostURL:8443</code> Kubernetes CA Certificate Certificate <p>Select <code>Add</code> to create the Kubernetes connection. You can add only one cluster for KubeDash. To edit the cluster select the pencil icon next to the line of the cluster.</p> <p></p>"},{"location":"functions/rbac/","title":"Users","text":"<p>Within KubDash, each person authenticates as a user, which is a login that grants you access to KubDash. As mentioned in Authentication, users can either be local or external.</p>"},{"location":"functions/rbac/#manage-user-roles","title":"Manage User Roles","text":"<p>KuDash enables a super-easy and user-friendly RBAC management for users in Kubernetes. If you are looking for a simple and intuitive way of managing your users within a Kubernetes cluster, this is the right place.</p> <p>With KuDash, you can create users, assign namespaces/permissions, via a nice and easy web UI.</p> <p></p>"},{"location":"functions/rbac/#manage-group-roles","title":"Manage Group Roles","text":"<p>KuDash automatically creates groups from SSO login information. You can map this groups with Role templates.</p> <p></p>"},{"location":"functions/rbac/#edit-kubernetes-roles-and-role-bindings","title":"Edit Kubernetes Roles and Role bindings","text":"<p>The application allows us to define and select permission-templates and associate them with all the users you might want to create. This defining can be done, within a namespace or globally. The template system is an abstraction over Cluster-Roles, RoleBinding, and ClusterRolesBindigs. A template is a ClusterRole with a prefix <code>template-namespaced-resources___</code> for example <code>template-namespaced-resources___developer</code> </p> <p>You can create your own templates by creating a clusterRole starting with the <code>template-namespaced-resources___</code> prefix. KubeDash will automatically detect your custom templates.</p>"},{"location":"functions/users/","title":"User Management","text":"<p>KubeDash use OIDC as its main authentication mechanism but from KubeDash 2.0 you can create local users from the UI and convert them into Kubernetes users. With this solution Kubernetes will use certificate based authentication. The benefit of this approach date you can authenticate without a working OIDC Identity Provider so it is perfect for admin users.</p> <p>You can manage your users under the <code>User Management &gt; Users</code> menu:</p> <p></p> <p>You can Create a new user wit the <code>Add User</code> button:</p> <p></p> <p>You can change the type of an existing user with the pencile icon next to the user:</p> <p></p>"},{"location":"functions/users/#roles","title":"Roles","text":"<p>The role of the user decides the ability of the user to manage dashboard users. There is two roles the <code>User</code> role and the <code>Admin</code> role. Only the users with <code>Admin</code> role can create or adit dashboard users.</p>"},{"location":"functions/users/#user-types","title":"User Types","text":"<p>There is tree user types:</p> <ul> <li>OpenID - Automatically created SSO users.</li> <li>Local - Manually created, stored in database without Kubernetes authentication.</li> <li>Kubernetes - Manually created, stored in database with certificate based Kubernetes authentication.</li> </ul>"},{"location":"installation/configuration/","title":"Configuration","text":"<p>Create a values file for your helm deploy:</p> <pre><code># -- Time Zone in container\nTimeZone: \"CET\"\n# -- Log level\nlogLevel: \"INFO\"\n# -- flask environment: production or development\nflaskConfig: \"production\"\n\nserviceAccount:\n  # -- Enable automatic serviceAccount creation\n  create: true\n  # -- Configure the name of the serviceAccount\n  name: \"kubedash-admin\"\n\nimage:\n  # -- The docker image repository to use\n  repository: devopstales/kubedash\n  # -- The docker image pull policy\n  pullPolicy: Always\n  # -- The docker image tag to use\n  tag: 2.0.0\n\n# -- pullsecrets\nimagePullSecrets: []\n\n# -- replica number - for multiple replicas you need to enable externalDatabase support\nreplicas: 1\n\n# -- enable external postgresql support\nexternalDatabase:\n  enabled: false\n  host: \"\"\n  port: 5432\n  database: \"kubedash\"\n  username: \"kubedash-user\"\n  password: \"kubedash-pass\"\n  secret:\n    # -- Name of the secret storing EXTERNAL_DATABASE_PASSWORD.\n    name: \"kubedash-postgresql\"\n    # -- Secret must provide the following variables: EXTERNAL_DATABASE_PASSWORD.\n    useExistingSecret: false\n\n# -- deploy HA postgresql\npostgresqlHa:\n  enabled: false\n  rbac:\n    create: true\n  persistence:\n    enabled: true\n#    storageClass: default\n  postgresql:\n    database: \"kubedash\"\n    username: \"kubedash-user\"\n    password: \"kubedash-pass\"\n    repmgrPassword: \"change-me\"\n    postgresPassword: \"change-me\"\n  pgpool:\n    replicaCount: 2\n    adminPassword: \"change-me\"\n  metrics:\n    enabled: true\n    serviceMonitor:\n      enabled: false\n# https://artifacthub.io/packages/helm/bitnami/postgresql-ha\n\n# -- enable metrics-server\nmetricsServer:\n  enabled: false\n  args:\n    - --kubelet-preferred-address-types=InternalIP\n    - --kubelet-insecure-tls\n\n# -- k8s connection information.\ncluster:\n  # -- k8s api url\n  name: \"k8s-cluster\"\n  # -- k8s api url\n  apiUrl: \"https://kubernetes.mydomain.intra:6443\"\n  # `apiServer` is the url for kubectl\n  #   This is typically  https://api.fqdn\n  # -- k8s ca cert\n  caCert: |-\n    -----BEGIN CERTIFICATE-----\n    cert data here\n    -----END CERTIFICATE-----\n  # `caCrt` is the public / CA cert for the cluster\n  # cat /etc/kubernetes/pki/ca.crt\n\n# -- oidc connection information\noidc:\n  # -- Enable oidc authentication\n  enabled: false\n  provider:\n    # -- oidc issuer url\n    oidcUrl: \"https://sso.mydomain.intra/auth/realms/k8s\"\n    # -- oidc scope\n    oidcScopes: \"openid email\"\n    # -- oidc client id\n    oidcClientId: \"\"\n    # -- oidc client secret\n    oidcSecret: \"\"\n  secret:\n    # -- Name of the secret storing OIDC_CLIENT_ID and OIDC_SECRET.\n    name: \"kubedash-oidc\"\n    # -- Secret must provide the following variables: OIDC_CLIENT_ID and OIDC_SECRET.\n    useExistingSecret: false\n\n# -- enable plugins\nplugins:\n  registryUi:\n    # -- Enable registry UI plugin with set PLUGIN_REGISTRY_ENABLED\n    enabled: false\n  helmDashboard:\n    # -- Enable helm dashboard plugin with set PLUGIN_HELM_ENABLED\n    enabled: true\n\npersistence:\n  # -- Volumes for the pod\n  enabled: true\n  # -- Volumes mode\n  accessMode: \"ReadWriteOnce\"\n  # -- Volumes size\n  size: \"1Gi\"\n  # -- Volumes annotations\n  annotations: {}\n  ## database data Persistent Volume Storage Class\n  ## If defined, storageClassName: &lt;storageClass&gt;\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS &amp; OpenStack)\n  ##\n  # storageClass: \"-\"\n\ningress:\n  # -- Enable Ingress object creation\n  enabled: true\n  # -- Ingress class name\n  className: \"nginx\"\n  # -- URL of the Ingress object\n  url: \"kubedash.mydomain.intra\"\n  # -- Extra annotation to the Ingress object\n  annotations:\n    nginx.ingress.kubernetes.io/proxy-body-size: \"10m\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"3600\"\n    nginx.ingress.kubernetes.io/server-snippets: |\n      location / {\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $http_host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header Connection \"upgrade\";\n        proxy_cache_bypass $http_upgrade;\n      }\n  tls:\n    # -- Enable tls on Ingress object\n    enabled: true\n    # -- Name of the secret storing tls cert\n    tlsSecret: \"\"\n    certManager:\n       # -- Enable certManager\n      enabled: false\n      # -- Name of the certManager cluster issuer to use\n      clusterIssuer: \"letsencrypt\"\n  whitelist:\n    # -- Enable ip blocking on ingress\n    enabled: false\n    # -- List of ips to allow communication\n    ips: []\n\nroute:\n  # -- Enable OpenShift Route object creation\n  enabled: false\n  # -- URL of the OpenShift Route object\n  url: \"kubedash.mydomain.intra\"\n  # -- Extra annotation to the OpenShift Route object\n  annotations: {}\n\n# -- list of the pos's SecurityContexts\npodSecurityContext:\n  runAsNonRoot: true\n  runAsUser: 10001\n  fsGroup: 10001\n  fsGroupChangePolicy: \"OnRootMismatch\"\n\n# -- list of the container's SecurityContexts\ncontainerSecurityContext:\n  allowPrivilegeEscalation: false\n  capabilities:\n    drop: [\"all\"]\n\n## Define which Nodes the Pods are scheduled on.\n## ref: https://kubernetes.io/docs/user-guide/node-selection/\n# -- Set nodeSelector for the pod\nnodeSelector: {}\n\n## Tolerations for use with node taints\n## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n# -- Set tolerations for the pod\ntolerations: []\n# - key: \"key\"\n#   operator: \"Equal\"\n#   value: \"value\"\n#   effect: \"NoSchedule\"\n\n## Assign custom affinity rules to the trivy operator\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n##\n\n## Assign custom affinity rules to the deployment\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n# -- Set the affinity for the pod.\naffinity: {}\n# nodeAffinity:\n#   requiredDuringSchedulingIgnoredDuringExecution:\n#     nodeSelectorTerms:\n#     - matchExpressions:\n#       - key: kubernetes.io/e2e-az-name\n#         operator: In\n#         values:\n#         - e2e-az1\n#         - e2e-az2\n</code></pre>"},{"location":"installation/configuration/#operator-configuration","title":"Operator Configuration","text":"<p>The following tables lists configurable parameters of the trivy-operator chart and their default values.</p> Key Type Default Description TimeZone string <code>\"CET\"</code> Time Zone in container affinity object <code>{}</code> Set the affinity for the pod. cluster object <code>{\"apiUrl\":\"https://kubernetes.mydomain.intra:6443\",\"caCert\":\"-----BEGIN CERTIFICATE-----\\ncert data here\\n-----END CERTIFICATE-----\",\"name\":\"k8s-cluster\"}</code> k8s connection information. cluster.apiUrl string <code>\"https://kubernetes.mydomain.intra:6443\"</code> k8s api url cluster.caCert string <code>\"-----BEGIN CERTIFICATE-----\\ncert data here\\n-----END CERTIFICATE-----\"</code> k8s ca cert cluster.name string <code>\"k8s-cluster\"</code> k8s api url containerSecurityContext object <code>{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]}}</code> list of the container's SecurityContexts externalDatabase object <code>{\"database\":\"kubedash\",\"enabled\":false,\"host\":\"\",\"password\":\"kubedash-pass\",\"port\":5432,\"secret\":{\"name\":\"kubedash-postgresql\",\"useExistingSecret\":false},\"username\":\"kubedash-user\"}</code> enable external postgresql support externalDatabase.secret.name string <code>\"kubedash-postgresql\"</code> Name of the secret storing EXTERNAL_DATABASE_PASSWORD. externalDatabase.secret.useExistingSecret bool <code>false</code> Secret must provide the following variables: EXTERNAL_DATABASE_PASSWORD. flaskConfig string <code>\"production\"</code> flask environment: production or development image.pullPolicy string <code>\"Always\"</code> The docker image pull policy image.repository string <code>\"devopstales/kubedash\"</code> The docker image repository to use image.tag string <code>\"2.0.0\"</code> The docker image tag to use imagePullSecrets list <code>[]</code> pullsecrets ingress.annotations object <code>{\"nginx.ingress.kubernetes.io/proxy-body-size\":\"10m\"}</code> Extra annotation to the Ingress object ingress.className string <code>\"nginx\"</code> Ingress class name ingress.enabled bool <code>true</code> Enable Ingress object creation ingress.tls.certManager.clusterIssuer string <code>\"letsencrypt\"</code> Name of the certManager cluster issuer to use ingress.tls.certManager.enabled bool <code>false</code> Enable certManager ingress.tls.enabled bool <code>true</code> Enable tls on Ingress object ingress.tls.tlsSecret string <code>\"\"</code> Name of the secret storing tls cert ingress.url string <code>\"kubedash.mydomain.intra\"</code> URL of the Ingress object ingress.whitelist.enabled bool <code>false</code> Enable ip blocking on ingress ingress.whitelist.ips list <code>[]</code> List of ips to allow communication logLevel string <code>\"INFO\"</code> Log level metricsServer object <code>{\"args\":[\"--kubelet-preferred-address-types=InternalIP\",\"--kubelet-insecure-tls\"],\"enabled\":false}</code> enable metrics-server nodeSelector object <code>{}</code> Set nodeSelector for the pod oidc object <code>{\"enabled\":false,\"provider\":{\"oidcClientId\":\"\",\"oidcScopes\":\"openid email\",\"oidcSecret\":\"\",\"oidcUrl\":\"https://sso.mydomain.intra/auth/realms/k8s\"},\"secret\":{\"name\":\"kubedash-oidc\",\"useExistingSecret\":false}}</code> oidc connection information oidc.enabled bool <code>false</code> Enable oidc authentication oidc.provider.oidcClientId string <code>\"\"</code> oidc client id oidc.provider.oidcScopes string <code>\"openid email\"</code> oidc scope oidc.provider.oidcSecret string <code>\"\"</code> oidc client secret oidc.provider.oidcUrl string <code>\"https://sso.mydomain.intra/auth/realms/k8s\"</code> oidc issuer url oidc.secret.name string <code>\"kubedash-oidc\"</code> Name of the secret storing OIDC_CLIENT_ID and OIDC_SECRET. oidc.secret.useExistingSecret bool <code>false</code> Secret must provide the following variables: OIDC_CLIENT_ID and OIDC_SECRET. persistence.accessMode string <code>\"ReadWriteOnce\"</code> Volumes mode persistence.annotations object <code>{}</code> Volumes annotations persistence.enabled bool <code>true</code> Volumes for the pod persistence.size string <code>\"1Gi\"</code> Volumes size plugins object <code>{\"helmDashboard\":{\"enabled\":true},\"registryUi\":{\"enabled\":false}}</code> enable plugins plugins.helmDashboard.enabled bool <code>true</code> Enable helm dashboard plugin with set PLUGIN_HELM_ENABLED plugins.registryUi.enabled bool <code>false</code> Enable registry UI plugin with set PLUGIN_REGISTRY_ENABLED podSecurityContext object <code>{\"fsGroup\":10001,\"fsGroupChangePolicy\":\"OnRootMismatch\",\"runAsNonRoot\":true,\"runAsUser\":10001}</code> list of the pos's SecurityContexts postgresqlHa object <code>{\"enabled\":false,\"metrics\":{\"enabled\":true,\"serviceMonitor\":{\"enabled\":false}},\"persistence\":{\"enabled\":true},\"pgpool\":{\"adminPassword\":\"change-me\",\"replicaCount\":2},\"postgresql\":{\"database\":\"kubedash\",\"password\":\"kubedash-pass\",\"postgresPassword\":\"change-me\",\"repmgrPassword\":\"change-me\",\"username\":\"kubedash-user\"},\"rbac\":{\"create\":true}}</code> deploy HA postgresql replicas int <code>1</code> replica number - for multiple replicas you need to enable externalDatabase support route.annotations object <code>{}</code> Extra annotation to the OpenShift Route object route.enabled bool <code>false</code> Enable OpenShift Route object creation route.url string <code>\"kubedash.mydomain.intra\"</code> URL of the OpenShift Route object serviceAccount.create bool <code>true</code> Enable automatic serviceAccount creation serviceAccount.name string <code>\"kubedash-admin\"</code> Configure the name of the serviceAccount tolerations list <code>[]</code> Set tolerations for the pod"},{"location":"installation/installation/","title":"Installation","text":""},{"location":"installation/installation/#before-you-begin","title":"Before you Begin","text":"<p>You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by installing minikube, kind or microk8s, or you can use the following Kubernetes playground.</p>"},{"location":"installation/installation/#helm","title":"Helm","text":"<p>Helm, which is a popular package manager for Kubernetes, allows installing applications from parameterized YAML manifests called Helm charts.</p>"},{"location":"installation/installation/#installing-from-the-devopstales-chart-repository","title":"Installing from the DevOpsTales Chart Repository","text":"<pre><code>helm repo add devopstales https://devopstales.github.io/helm-charts\nhelm repo update\nhelm upgrade --install kubedash devopstales/kubedash\n</code></pre> <p>Tip: List all releases using <code>helm list</code>.</p>"},{"location":"installation/installation/#advanced-configuration","title":"Advanced Configuration","text":"<p>The command deploys kubedash on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation.</p>"},{"location":"installation/installation/#uninstall","title":"Uninstall","text":"<p>You can uninstall the operator with the following command:</p> <pre><code>helm uninstall kubedash\n</code></pre>"},{"location":"installation/platforms/","title":"Platforms","text":""},{"location":"installation/platforms/#tested-kubernetes-platforms","title":"Tested Kubernetes Platforms","text":"<p>This section shows the different platforms where KubeDash has been tested or is intended to be tested, and useful observations about it. If you have tested KubeDash on a different flavor or Kubernetes, please file a PR or issue to add your remarks to the list.</p> <p>The \"works\" column refers to the overall Kubernetes related functionality when running in the respective platform; it may have 3 different values:</p> <ul> <li>\u2714\ufe0f : Has been tried and works fine to the extent of what has been tested</li> <li>\u274c : Has been tried and didn't work or had issues that prevented a regular use of it</li> <li>\u2754: Hasn't been tried/reported yet</li> </ul> Platform Works Comments Amazon EKS \u2714\ufe0f - Simple to install Google Kubernetes Engine (GKE) \u2714\ufe0f - Simple to install Microsoft AKS \u2714\ufe0f - Simple to install DigitalOcean Kubernetes \u2754 - Have you tried KubeDash on this platform? Please report your experience. K3s \u2714\ufe0f - Simple to install Kind \u2714\ufe0f - Simple to install Minikube \u2714\ufe0f - For exposing with an ingress, enable ingresses with <code>minikube addons enable ingress</code> RKE2 \u2714\ufe0f - Simple to install Lokomotive \u2754 - Have you tried KubeDash on this platform? Please report your experience. Vultr Kubernetes Engine \u2754 - Have you tried KubeDash on this platform? Please report your experience."},{"location":"installation/platforms/#tested-browsers","title":"Tested Browsers","text":"<p>We mostly test with 'modern browsers' defined as the latest version and two older versions. But we try to make KubeDash work with web standards, so it's quite likely other standards conforming browsers will also work.</p> Platform Works Comments Edge \u2714\ufe0f Safari \u2714\ufe0f Firefox \u2714\ufe0f Chrome \u2714\ufe0f Internet Explorer 11 \u2714\ufe0f"},{"location":"integrations/docker-registry/","title":"Docker Registry Integration","text":"<p>From KubeDash 2.0 you can configure your dashboard as a Docker Registry UI:</p> <p></p> <p></p>"},{"location":"integrations/docker-registry/#using-cors","title":"Using CORS","text":"<p>Your server should be configured to accept CORS.</p> <p>If your docker registry does not need credentials, you will need to send this HEADER:</p> <pre><code>Access-Control-Allow-Origin: ['*']\n</code></pre> <p>If your docker registry need credentials, you will need to send these HEADERS (you must add the protocol <code>http</code>/<code>https</code> and the port when not default <code>80</code>/<code>443</code>):</p> <pre><code>http:\n  headers:\n    Access-Control-Allow-Origin: ['http://registry.example.com']\n    Access-Control-Allow-Credentials: [true]\n    Access-Control-Allow-Headers: ['Authorization', 'Accept', 'Cache-Control']\n    Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS'] # Optional\n</code></pre>"},{"location":"integrations/docker-registry/#enable-delete","title":"Enable delete","text":"<p>For deleting images, you need to activate the delete feature in the UI with <code>DELETE_IMAGES=true</code> and in your registry:</p> <pre><code>storage:\n    delete:\n      enabled: true\n</code></pre> <p>And you need to add these HEADERS:</p> <pre><code>http:\n  headers:\n    Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']\n    Access-Control-Allow-Headers: ['Authorization', 'Accept', 'Cache-Control']\n    Access-Control-Expose-Headers: ['Docker-Content-Digest']\n</code></pre>"},{"location":"integrations/docker-registry/#basic-authentication","title":"Basic Authentication","text":"<p>Enable authentication in the registry config:</p> <pre><code>auth:\n  htpasswd:\n    realm: basic-realm\n    path: /etc/docker/registry/htpasswd\n</code></pre> <p>Then add the Registry at <code>OCI Registrys &gt; Add Registry</code></p> <p></p> <p></p>"},{"location":"integrations/docker-registry/#registry-events","title":"Registry Events","text":"<p>If your Registry supports sending webhook notifications in response to events happening within the registry, then the KubeDash can store this events in its database and visualize.</p> <pre><code>notifications:\n  endpoints:\n    - name: kubedash\n      url: https://kubedash.mydomain.intra/registry/events\n      timeout: 1s\n      threshold: 5\n      backoff: 10s\n      ignoredmediatypes:\n        - application/octet-stream\n</code></pre> <p></p>"},{"location":"integrations/docker-registry/#image-tagging","title":"Image Tagging","text":""},{"location":"integrations/docker-registry/#oci-helm-charts","title":"OCI Helm Charts","text":"<p>If you use an OCI compatible Docker Registry you can store your Helm chart in OCI format. With KubeDash, you can visualize the Helm Chart metadata:</p> <p></p>"},{"location":"integrations/docker-registry/#image-security-sbom","title":"Image Security SBOM","text":"<p>SBOMs can also be stored in an OCI registry, using OCI specification:</p> <pre><code>trivy i --format cosign-vuln \\\nregistry.mydomain.intra:5000/registry-imega-test:1.0 &gt; image.sbom\n\ncosign attach sbom --sbom image.sbom \\\nregistry.mydomain.intra:5000/registry-imega-test:1.0\n</code></pre> <p></p>"},{"location":"integrations/helm/","title":"HelmChart","text":"<p>KubeDash offers a UI-driven way to view the installed Helm charts, see their revision history and corresponding k8s resources.</p> <p>Key capabilities of the tool:</p> <ul> <li>See all installed charts and their revision history</li> <li>Browse k8s resources resulting from the chart</li> </ul> <p></p>"},{"location":"integrations/kubectl-plugin/","title":"Kubectl Plugin","text":"<p>Kubectl has the ability to extend it's functionality with plugins. To ease the download and installation of the kubectl config KubeDash offers a simple kubectl plugin for login. I will open the login page automatically in the browser and merge the configuration to the local kubectl config.</p>"},{"location":"integrations/kubectl-plugin/#install-kubectl-plugin","title":"Install Kubectl plugin","text":"<pre><code># Homebrew (macOS and Linux)\nbrew tap devopstales/devopstales\nbrew install kubectl-kdlogin\n\n# My krew repo (macOS, Linux, Windows and ARM)\nkubectl krew index add devopstales https://github.com/devopstales/krew\nkubectl krew install devopstales/kdlogin\n\n# Chocolatey (Windows)\nchoco install kubectl-kdlogin\n\n# Binary release (Windows, macOS and Linux)\nhttps://github.com/devopstales/kubedash/releases\n</code></pre>"},{"location":"integrations/kubectl-plugin/#use-the-plugin","title":"Use the plugin","text":"<pre><code>$ kubectl kdlogin /\nConfigfile created with config for productioncluster to ~/.kube/config\nHappy Kubernetes interaction!\n</code></pre>"},{"location":"integrations/trivy-operator/","title":"trivy-operator integration","text":"<p>KubeDash can integrate with trivy-operator. Kubdash automatically detects the VulnerabilityReport Custom Resource Objects created by trivy-operator and show the vulnerability at the Pod's page. </p>"}]}