{% extends "base2.html.j2" %}

{% block topmenu %}
<ul class="header-nav d-lg-flex m-3">
    <div class="container-fluid px-4">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb my-0">
          <li class="breadcrumb-item"><span>Dashboard</span></li>
          <li class="breadcrumb-item active"><span>Workload Map</span></li>
        </ol>
      </nav>
    </div>
</ul>
<ul class="header-nav ms-auto"></ul>
<ul class="header-nav d-lg-flex">
{% include "segments/topmenu.html.j2" %}
{% endblock %}


{% block content %}
<div class="card">
    <div id="filter-menu" class="card-header">
        <div class="row no-gutters">
            <div class="col-3">
                <select class="form-select" aria-label="Default select example" onchange="updateFilter(value, 'item')" id="select-item" >
                    <option value="">Select a network item</option>
                    <option value="edge">edge</option>
                    <option value="node">node</option>
                </select>
            </div>
            <div class="col-3 pl-2">
                <select class="form-select" aria-label="Default select example" onchange="updateFilter(value, 'property')" id="select-property" >
                    <option value="">Select a property...</option>
                </select>
            </div>
            <div class="col-3 pl-2">
                <select class="form-select" aria-label="Default select example" id="select-value" >
                    <option value="">Select value(s)...</option>
                </select>
            </div>
            <div class="col-1 pl-2">
              <button type="button" class="btn btn-primary btn-block" onclick="highlightFilter(filter);">Filter</button>
            </div>
            <div class="col-2 pl-2">
              <button type="button" class="btn btn-primary btn-block" onclick="clearFilter(true)">Reset Selection</button>
            </div>
        </div>
    </div>
    <div id="mynetwork" class="card-body"></div>
</div>
{% endblock %}

{% block add_head_css %}
{% include "segments/pyvis_snipet.html.j2" %}
{% endblock %}


{% block add_tail_js %}
    <script>
        function getThemeColor() {
            return document.documentElement.getAttribute('data-coreui-theme') === 'dark' ? '#181a1b' : '#ffffff';
        }

        function updateNetworkTheme() {
            let isDark = document.documentElement.getAttribute('data-coreui-theme') === 'dark';
            let bgColor = isDark ? '#181a1b' : '#ffffff';
            let textColor = isDark ? '#ffffff' : '#000000';

            // Change Pyvis background
            document.getElementById('mynetwork').style.backgroundColor = bgColor;

            // Change tooltip color for node titles
            let style = document.createElement('style');
            style.innerHTML = `
                .vis-tooltip {
                    color: ${textColor} !important;
                    background-color: rgba(0, 0, 0, 0.8) !important;
                    border: 1px solid #ccc !important;
                }
                /* Fix the select object (.ts-control) in dark mode */
                .ts-control {
                    background-color: ${bgColor} !important;
                    color: ${textColor} !important;
                    border: 1px solid ${isDark ? '#ffffff' : '#000000'} !important;
                }
                .ts-control input {
                    background-color: ${bgColor} !important;
                    color: ${textColor} !important;
                }
                /* Fix .data-selectable elements in dark mode */
                .ts-dropdown [data-selectable].option {
                    background-color: ${bgColor} !important;
                    color: ${textColor} !important;
                    border: 1px solid ${isDark ? '#ffffff' : '#000000'} !important;
                }
            `;
            document.head.appendChild(style);
        }

        const observer = new MutationObserver(() => updateNetworkTheme());
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-coreui-theme'] });

        window.onload = updateNetworkTheme;
    </script>

    <script type="text/javascript">
        // initialize global variables.
        var edges;
        var nodes;
        var allNodes;
        var allEdges;
        var nodeColors;
        var originalNodes;
        var network;
        var container;
        var options, data;
        var filter = {
            item : '',
            property : '',
            value : []
        };

        // explicitly using onItemAdd and this function as we need to save multiple values
        let updateValueFilter = function() {
            return function () {
            filter['value'].push(arguments[0])
            }
        }

        let valueControl = new TomSelect("#select-value",{
            maxItems: null,
            valueField: 'id',
            labelField: 'title',
            searchField: 'title',
            create: false,
            sortField: {
                field: "text",
                direction: "asc"
            },
            onItemAdd: updateValueFilter()
        });

        let addValues = function() {
            return function () {
                // clear the current value options and add the selected attribute values
                // tom-select handles duplicates
                let selectedProperty = arguments[0];
                valueControl.clear();
                valueControl.clearOptions();
                filter['value'] = []
                if (filter['item'] === 'node') {
                    for (let each in allNodes) {
                        valueControl.addOption({
                            id:allNodes[each][selectedProperty],
                            title:allNodes[each][selectedProperty]
                        })
                    }
                }
                else if (filter['item'] === 'edge') {
                    for (let each in allEdges) {
                        valueControl.addOption({
                            id:allEdges[each][selectedProperty],
                            title:allEdges[each][selectedProperty]
                        })
                    }
                }
            }
        };

        let propControl = new TomSelect("#select-property",{
            valueField: 'id',
            labelField: 'title',
            searchField: 'title',
            create: false,
            sortField: {
                field: "text",
                direction: "asc"
            },
            onItemAdd: addValues()
        });

        let addProperties = function() {
            return function () {
                // loops through the selected network item and adds the attributes to dropdown
                // tom-select handles duplicates
                clearFilter(false)
                if (arguments[0] === 'edge') {
                    for (let each in allEdges) {
                        if (allEdges.hasOwnProperty(each)) {
                            for (let eachProp in allEdges[each]) {
                                if (allEdges[each].hasOwnProperty(eachProp)) {
                                    propControl.addOption({id: eachProp, title: eachProp})
                                }
                            }
                        }
                    }
                }
                else if (arguments[0] === 'node') {
                    for (let each in allNodes) {
                        if (allNodes.hasOwnProperty(each)) {
                            for (let eachProp in allNodes[each]) {
                                if (allNodes[each].hasOwnProperty(eachProp)
                                    && (eachProp !== 'hidden' && eachProp !== 'savedLabel'
                                        && eachProp !== 'hiddenLabel')) {
                                    propControl.addOption({id: eachProp, title: eachProp})

                                }
                            }
                        }
                    }
                }
            }
        };

        let itemControl = new TomSelect("#select-item",{
            create: false,
            sortField:{
                field: "text",
                direction: "asc"
            },
            onItemAdd: addProperties()
        });

        function clearFilter(reset) {
            // utility function to clear all the selected filter options
            // if reset is set to true, the existing filter will be removed
            // else, only the dropdown options are cleared
            propControl.clear();
            propControl.clearOptions();
            valueControl.clear();
            valueControl.clearOptions();
            filter = {
                item : '',
                property : '',
                value : []
            }
            if (reset) {
                itemControl.clear();
                filterHighlight({nodes: []})
            }
        }

        function updateFilter(value, key) {
            // key could be 'item' or 'property' and value is as selected in dropdown
            filter[key] = value
        }

        // This method is responsible for drawing the graph, returns the drawn network
        function drawGraph() {
            var container = document.getElementById('mynetwork');
            let node = JSON.parse('{{ nodes | tojson }}');
            let edge = JSON.parse('{{ edges | tojson }}');

            // parsing and collecting nodes and edges from the python
            nodes = new vis.DataSet(node);
            edges = new vis.DataSet(edge);

            nodeColors = {};
            allNodes = nodes.get({ returnType: "Object" });
            for (nodeId in allNodes) {
                nodeColors[nodeId] = allNodes[nodeId].color;
            }
            allEdges = edges.get({ returnType: "Object" });
            // adding nodes and edges to the graph
            data = {nodes: nodes, edges: edges};

            var options = {
                "configure": {
                    "enabled": false
                },
                "edges": {
                    "color": {
                        "inherit": true
                    },
                    "smooth": {
                        "enabled": true,
                        "type": "dynamic"
                    }
                },
                "groups": {
                    "daemonset": {
                        "image": {
                            "unselected": "{{ url_for('static',filename='/img/ds.svg') }}"
                        },
                        "level": 2,
                        "shape": "image"
                    },
                    "deployment": {
                        "image": {
                            "unselected": "{{ url_for('static',filename='/img/ds.svg') }}"
                        },
                        "level": 1,
                        "shape": "image"
                    },
                    "pod": {
                        "image": {
                            "unselected": "{{ url_for('static',filename='/img/pod.svg') }}"
                        },
                        "level": 3,
                        "shape": "image"
                    },
                    "replicaset": {
                        "image": {
                            "unselected": "{{ url_for('static',filename='/img/rs.svg') }}"
                        },
                        "level": 2,
                        "shape": "image"
                    },
                    "statefulset": {
                        "image": {
                            "unselected": "{{ url_for('static',filename='/img/sts.svg') }}"
                        },
                        "level": 2,
                        "shape": "image"
                    }
                },
                "interaction": {
                    "zoomView": false,
                    "dragNodes": true,
                    "hideEdgesOnDrag": false,
                    "hideNodesOnDrag": false,
                    "navigationButtons": true,
                },
                "layout": {
                    "hierarchical": {
                        "blockShifting": true,
                        "edgeMinimization": true,
                        "enabled": true,
                        "levelSeparation": 150,
                        "parentCentralization": true,
                        "sortMethod": "hubsize",
                        "treeSpacing": 200
                    },
                    "improvedLayout": true,
                    "randomSeed": 0
                },
                "physics": {
                    "enabled": true,
                    "stabilization": {
                        "enabled": true,
                        "fit": true,
                        "iterations": 1000,
                        "onlyDynamicEdges": false,
                        "updateInterval": 50
                    }
                }
            };

            // if this network requires displaying the configure window,
            // put it in its div
            // options.configure["container"] = document.getElementById("config");
            network = new vis.Network(container, data, options);
            return network;
        }
        drawGraph();
    </script>
{% endblock %}