version: '3'

env:
  VERSION: "3.1.0"
  DATE: 
    sh: date "+%Y.%m.%d"

tasks:
  default:
    desc: "Print Help"
    cmds:
      - "task --list-all"

  docker-up:
    desc: "Start dev containers"
    dir: 'deploy/docker-compose'
    cmds:
      - docker compose -f dc-nginx.yaml -f dc-postgresql.yaml -f dc-redis.yaml -f dc-registry.yaml up -d

  docker-images:
    desc: "Copy docker images"
    dir: '/tmp'
    cmds:
      # - skopeo login --tls-verify=false 127.0.0.1:4000
      # - skopeo login devopstales
      - skopeo copy --dest-tls-verify=false --override-os=linux docker://python:3.12-rc-alpine docker://127.0.0.1:4000/python:3.12-rc-alpine
      - skopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:1.0 docker://127.0.0.1:4000/registry-imega-test:1.0
      - skopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:2.0 docker://127.0.0.1:4000/registry-imega-test:2.0
      - skopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:3.0 docker://127.0.0.1:4000/registry-imega-test:3.0
      - skopeo copy --dest-tls-verify=false --override-os=linux docker://devopstales/registry-imega-test:3.0 docker://127.0.0.1:4000/registry-imega-test:test
      # - oras login --plain-http 127.0.0.1:4000
      - oras copy --to-plain-http ghcr.io/aquasecurity/trivy-db:2 127.0.0.1:4000/trivy-db:2
      - oras copy --to-plain-http ghcr.io/aquasecurity/trivy-java-db:1 127.0.0.1:4000/trivy-java-db:1
      - helm pull oci://registry-1.docker.io/bitnamicharts/redis --version 17.9.5
      - helm push redis-17.9.5.tgz OCI://127.0.0.1:4000/helm-charts
      - trivy i --format cosign-vuln 127.0.0.1:4000/registry-imega-test:1.0 > image.sbom
      - cosign attach sbom --sbom image.sbom 127.0.0.1:4000/registry-imega-test:1.0


  docker-down:
    desc: "Stop dev containers"
    dir: 'deploy/docker-compose'
    cmds:
      - docker compose -f dc-nginx.yaml -f dc-postgresql.yaml -f dc-redis.yaml -f dc-registry.yaml down

  kubedash-requirements:
    desc: "Generate Kubedash requirements"
    dir: 'src/kubedash'
    cmds:
      - poetry export --without-hashes -f requirements.txt

  kubedash-safety:
    desc: "Safety chack Kubedash requirements"
    dir: 'src/kubedash'
    cmds:
      - poetry export --without-hashes -f requirements.txt | safety check --stdin

  kubedash-audit:
    desc: "Run tests for Kubedash"
    dir: 'src/kubedash'
    cmds:
      - poetry run pip-audit

  kubedash-lint:
    desc: "Lint Kubedash"
    dir: 'src/kubedash'
    cmds:
      - poetry run isort .
      - poetry run flake8 .
      #- poetry run autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place .
      - poetry run black --check .

  kubedash-build:
    desc: "Build Kubedash docker image"
    cmds:
      - rm -rf docker/kubedash/kubedash
      - cp -r src/kubedash docker/kubedash/kubedash
      - rm -f docker/kubedash/requirements.txt
      - cp docker/kubedash/kubedash/requirements.txt docker/kubedash/requirements.txt
      - rm -f docker/kubedash/gunicorn_conf.py
      - cp docker/kubedash/kubedash/gunicorn_conf.py docker/kubedash/gunicorn_conf.py
      - docker build --build-arg BUILD_DATE={{.DATE}} --build-arg VERSION={{.VERSION}}-devel -t devopstales/kubedash:{{.VERSION}}-devel docker/kubedash

  kubedash-scan:
    desc: "Scan Kubedash Dockerfile for vulnerabilities"
    cmds:
      - trivy -q i devopstales/kubedash:{{.VERSION}}-devel --scanners vuln

  kubedash-push:
    desc: "Push Kubedash docker image"
    cmds:
      - docker push devopstales/kubedash:{{.VERSION}}-devel

  kubedash-rm:
    desc: "Remove Kubedash docker image"
    cmds:
      - docker rmi devopstales/kubedash:{{.VERSION}}-devel

  kdlogin-build:
    desc: "Build kubectl-kdlogin"
    dir: 'src/kdlogin'
    cmds:
      - go mod tidy
      - sed -i "s|AppVersion = .*|AppVersion = \"{{.VERSION}}\"|" main.go
      - rm -rf dist/{windows,linux,osx,release}
      - rm -f dist/choco/*.nupkg
      - env CGO_ENABLED=0 go build -o dist/linux/kubectl-kdlogin main.go
      - env CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o dist/osx/kubectl-kdlogin main.go
      - env CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o dist/windows/kubectl-kdlogin.exe main.go
    status:
      - test -f dist/linux/kubectl-kdlogin
      - test -f dist/osx/kubectl-kdlogin
      - test -f dist/windows/kubectl-kdlogin.exe

  kdlogin-scan:
   desc: "Scan kubectl-kdlogin for vulnerabilities"
   dir: 'src/kdlogin'
   cmds:
     - trivy -q fs .

  kdlogin-rm:
    desc: "Remove kubectl-kdlogin"
    dir: 'src/kdlogin'
    cmds:
      - rm -rf dist/{windows,linux,osx,release}
      - rm -f dist/choco/*.nupkg

  docs-gen:
    desc: "Generate documentation"
    dir: 'docs'
    cmds:
      - python3.11 -m venv .venv
      - source .venv/bin/activate
      - pip3 install -r build/requirements.txt
      - mkdocs build

  helm-docs:
   desc: "Generate Helm Chart documentation"
   dir: 'deploy/helm'
   cmds:
    - helm-docs