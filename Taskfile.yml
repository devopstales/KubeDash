version: '3'

env:
  VERSION: "3.1.0"
  DATE: 
    sh: date "+%Y.%m.%d"

tasks:
  default:
    desc: "Print Help"
    cmds:
      - "task --list-all"

  kubedash-build:
    desc: "Build Kubedash docker image"
    cmds:
      - rm -rf docker/kubedash/kubedash
      - cp -r src/kubedash docker/kubedash/kubedash
      - rm -f docker/kubedash/requirements.txt
      - cp docker/kubedash/kubedash/requirements.txt docker/kubedash/requirements.txt
      - rm -f docker/kubedash/gunicorn_conf.py
      - cp docker/kubedash/kubedash/gunicorn_conf.py docker/kubedash/gunicorn_conf.py
      - docker build --build-arg BUILD_DATE={{.DATE}} --build-arg VERSION={{.VERSION}}-devel -t devopstales/kubedash:{{.VERSION}}-devel docker/kubedash

  kubedash-scan:
    desc: "Scan Kubedash Dockerfile for vulnerabilities"
    cmds:
      - trivy -q i devopstales/kubedash:{{.VERSION}}-devel --scanners vuln

  kubedash-sign:
    desc: "Sign Kubedash docker image"
    cmds:
      - cosign sign --key $HOME/.gnupg/cosign.key devopstales/kubedash:{{.VERSION}}-devel -y

  kubedash-push:
    desc: "Push Kubedash docker image"
    cmds:
      - docker push devopstales/kubedash:{{.VERSION}}-devel

  kubedash-rm:
    desc: "Remove Kubedash docker image"
    cmds:
      - docker rmi devopstales/kubedash:{{.VERSION}}-devel

  helm-build:
    desc: "Build Helm Chart"
    dir: 'deploy/helm'
    cmds:
      - helm dependency update
      - helm package --version {{.VERSION}} --app-version {{.VERSION}} .
      - helm push kubedash-{{.VERSION}}.tgz oci://registry-1.docker.io/devopstales &> push-metadata.txt
  
  helm-sign:
    desc: "Sign Helm Chart"
    dir: 'deploy/helm'
    cmds:
      - cosign sign-blob -y --key $HOME/.gnupg/cosign.key kubedash-{{.VERSION}}.tgz --bundle ubedash-{{.VERSION}}.tgz.cosign.bundle
      #- CHART_DIGEST=$(grep -oP "(?<=digest: sha256:)[a-z0-9]+" push-metadata.txt)
      #- cosign sign -y --key $HOME/.gnupg/cosign.key push-metadata.txt devopstales/helm-charts/kubedash:$CHART_DIGEST
      - rm -f push-metadata.txt
      - rm -f kubedash-{{.VERSION}}.tgz
      - rm -f kubedash-{{.VERSION}}.tgz.cosign.bundle 

  kdlogin-build:
    desc: "Build kubectl-kdlogin"
    dir: 'src/kdlogin'
    cmds:
      - go mod tidy
      - sed -i "s|AppVersion = .*|AppVersion = \"{{.VERSION}}\"|" main.go
      - rm -rf dist/{windows,linux,osx,release}
      - rm -f dist/choco/*.nupkg
      - env CGO_ENABLED=0 go build -o dist/linux/kubectl-kdlogin main.go
      - env CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o dist/osx/kubectl-kdlogin main.go
      - env CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o dist/windows/kubectl-kdlogin.exe main.go
    status:
      - test -f dist/linux/kubectl-kdlogin
      - test -f dist/osx/kubectl-kdlogin
      - test -f dist/windows/kubectl-kdlogin.exe

  kdlogin-scan:
   desc: "Scan kubectl-kdlogin for vulnerabilities"
   dir: 'src/kdlogin'
   cmds:
     - trivy -q fs .

  kdlogin-rm:
    desc: "Remove kubectl-kdlogin"
    dir: 'src/kdlogin'
    cmds:
      - rm -rf dist/{windows,linux,osx,release}
      - rm -f dist/choco/*.nupkg

  docs-gen:
    desc: "Generate documentation"
    dir: 'docs'
    cmds:
      - python3.11 -m venv .venv
      - source .venv/bin/activate
      - pip3 install -r build/requirements.txt
      - mkdocs build

  helm-docs:
   desc: "Generate Helm Chart documentation"
   dir: 'deploy/helm'
   cmds:
    - helm-docs